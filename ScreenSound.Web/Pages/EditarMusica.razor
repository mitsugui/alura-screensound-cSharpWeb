@page "/EditarMusica/{NomeMusica}"
@inject MusicasApi MusicasApi
@inject ArtistasApi ArtistasApi
@inject GenerosApi GenerosApi
@inject NavigationManager NavigationManager

<PageTitle>Edição de música</PageTitle>


<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

	<MudText Class="mt-8" Typo="Typo.h4">Edição de Músicas</MudText>

	<MudForm>

		<MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção"
					  Variant="Variant.Outlined"
					  @bind-Value="_nome"
					  Required="true"
					  RequiredError="Campo obrigatório." />

		<MudSelect Class="mt-4" T="ArtistaResponse" Label="Artistas" Variant="Variant.Outlined"
				   @bind-Value="ArtistaDaMusica"
				   AnchorOrigin="Origin.BottomCenter">
			@if (_artistas is not null)
			{
				@foreach (var artista in _artistas)
				{
					<MudSelectItem Value="artista">@artista.Nome</MudSelectItem>
				}
			}
		</MudSelect>

		<MudNumericField Class="mt-4" Placeholder="Ano de lançamento"
						 @bind-Value="_anoLancamento"
						 Variant="Variant.Outlined"
						 Lines="1"
						 Required="true"
						 RequiredError="Campo obrigatório." />

		<MudSelect Class="mt-4" T="GeneroResponse" Label="Gêneros" Variant="Variant.Outlined"
		           MultiSelection="true"
				   @bind-SelectedValues="GenerosSelecionados"
				   AnchorOrigin="Origin.BottomCenter">
			@if (_generos is not null)
			{
				@foreach (var genero in _generos)
				{
					<MudSelectItem Value="genero" />
				}
			}
		</MudSelect>

		<div class="d-flex align-center justify-space-between mt-4">
			<MudButton Variant="Variant.Filled"
					   @onclick="SalvarAsync"
					   Color="Color.Primary"
					   Class="m1-auto">
				Salvar
			</MudButton>
			<MudButton Variant="Variant.Filled"
					   @onclick="DeletarAsync"
					   Color="Color.Primary"
					   Class="m1-auto">
				Deletar
			</MudButton>
			<MudButton Variant="Variant.Filled"
					   @onclick="Voltar"
					   Color="Color.Primary"
					   Class="m1-auto">
				Voltar
			</MudButton>
		</div>

	</MudForm>

</MudPaper>

@code {

	private string? _nome;
	private int? _anoLancamento;
	private ICollection<ArtistaResponse>? _artistas;
	private ICollection<GeneroResponse>? _generos;
	
	private IEnumerable<GeneroResponse> GenerosSelecionados { get; set; } = new List<GeneroResponse>();
	private ArtistaResponse? ArtistaDaMusica { get; set; }
	private MusicaResponse? Musica { get; set; }

	[Parameter]
	public string? NomeMusica { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		_artistas = await ArtistasApi.GetArtistasAsync();
		_generos = await GenerosApi.GetGenerosAsync();
		
		Musica = await MusicasApi.GetMusicaPorNomeAsync(NomeMusica!);
		if (Musica == null) return;

		_nome = Musica.Nome;
		_anoLancamento = Musica.AnoLancamento;
		ArtistaDaMusica = _artistas
			?.FirstOrDefault(a => a.Id == Musica.IdArtista.GetValueOrDefault());
		GenerosSelecionados = Musica.Generos?.ToList() 
			?? new List<GeneroResponse>();
	}

	public async Task SalvarAsync()
	{
		List<GeneroRequest>? generosRequest;
		if(Musica?.Generos != null
			&& !GenerosSelecionados
		   .Select(g => g.Id)
				.ToHashSet()
		   .SetEquals(Musica.Generos.Select(g => g.Id)))
		{
			generosRequest = new List<GeneroRequest>();
			foreach (var genero in GenerosSelecionados)
			{
				generosRequest.Add(new GeneroRequest(
					genero.Nome, genero.Descricao));
			}
		}
		else
		{
			generosRequest = null;
		}

		var idArtista = Musica?.IdArtista != ArtistaDaMusica?.Id 
			? ArtistaDaMusica?.Id
			: null;

		var request = new EditarMusicaRequest(Musica!.Id, _nome!, _anoLancamento!, idArtista, generosRequest);
		await MusicasApi.UpdateMusicaAsync(request);
		NavigationManager.NavigateTo("/MusicasPorGenero");
	}
	
	public async Task DeletarAsync()
	{
		await MusicasApi.DeleteMusicaAsync(Musica!.Id);
	}

	public void Voltar()
	{
		var genero = GenerosSelecionados
			?.FirstOrDefault()
			?.Nome;
		NavigationManager.NavigateTo(genero != null
			? $"/MusicasPorGenero/{genero}"
			: "/MusicasPorGenero");
	}
}
