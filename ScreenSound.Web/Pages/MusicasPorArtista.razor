@page "/MusicasPorArtista"
@page "/MusicasPorArtista/{NomeArtista}"
@inject MusicasApi MusicasApi
@inject ArtistasApi ArtistasApi

<PageTitle>Procurar Músicas</PageTitle>

<MudAutocomplete T="string"
                 Label="Artista"
				 @bind-Value="NomeArtista"
                 SearchFunc="@ListarArtistasAsync"
                 ResetValueOnEmptyText="true"
                 CoerceValue="true"
                 ShowProgressIndicator="true"
                 AdornmentIcon="@Icons.Material.Filled.Search" 
                 AdornmentColor="Color.Primary" />

<MudButton Variant="Variant.Filled"
           @onclick="PesquisarAsync"
           Color="Color.Primary"
           Class="m1-auto mt-4">
	Pesquisar
</MudButton>

@if (_musicas is not null)
{
	<MudGrid>
		@foreach (var musica in _musicas)
		{
			<MudItem xs="3">
				<CardMusica Musica="musica" />
			</MudItem>
		}
	</MudGrid>
}

@code {
	private ICollection<MusicaResponse>? _musicas;

	[Parameter]
	public string? NomeArtista { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (NomeArtista == null) return;

		await PesquisarAsync();
	}

	private async Task<IEnumerable<string>> ListarArtistasAsync(string genero)
	{
		if (string.IsNullOrEmpty(genero)) return Array.Empty<string>();

		var artistas = await ArtistasApi.GetArtistasAsync();
		return artistas
				?.Where(a => a.Nome
					.Contains(genero, StringComparison.InvariantCultureIgnoreCase))
				.Select(g => g.Nome)
			?? Array.Empty<string>();
	}

	private async Task PesquisarAsync()
	{
		_musicas = NomeArtista is not null
			? await MusicasApi.GetMusicasPorArtistaAsync(NomeArtista)
			: null;
	}
}